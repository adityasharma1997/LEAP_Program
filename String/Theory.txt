The java.lang.String class implements Serializable, Comparable and CharSequence interfaces.

The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it.
It means, we can create strings in Java by using these three classes.

The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. 
For mutable strings, you can use StringBuffer and StringBuilder classes.

There are two ways to create String object:

    --By string literal   
        String s= "Aditya"
        Each time you create a string literal, the JVM checks the "string constant pool" first. 
        If the string already exists in the pool, a reference to the pooled instance is returned. 
        If the string doesn't exist in the pool, a new string instance is created and placed in the pool.

    --By new keyword  
        String s = new String("Aditya")
        In such case, JVM will create a new string object in normal (non-pool) heap memory, 
        and the literal "Aditya" will be placed in the string constant pool. 
        The variable s will refer to the object in a heap (non-pool).


Once String object is created its data or state can't be changed but a new String object is created.

public static void main(String args[]){  
   String s="Sachin";  
   s.concat(" Tendulkar");//concat() method appends the string at the end  
   System.out.println(s);//will print Sachin because strings are immutable objects 

          Here Sachin is not changed but a new object is created with Sachin Tendulkar.


   s=s.concat(" Tendulkar");//concat() method appends the string at the end  
   System.out.println(s);//will print Sachin Tendulkar because strings are immutable objects  

 } 


 Why String is immutable?

    As Java uses the concept of String literal. Suppose there are 5 reference variables,
    all refer to one object "Sachin". If one reference variable changes the value of the object, 
    it will be affected by all the reference variables. That is why String objects are immutable in Java.

It also makes the application program more secure.
    Consider an example of banking software. 
    The username and password cannot be modified by any intruder because String objects are immutable. 
    This can make the application program more secure. 

Use of heap space efficiently
        The immutability of String helps to minimize the usage in the heap memory. 
        When we try to declare a new String object, the JVM checks whether the value already exists in the String pool or not. 
        If it exists, the same value is assigned to the new object. 
        This feature allows Java to use the heap space efficiently.

Why String class in final in Java?
    The reason behind the String class being final is because no one can override the methods of the String class. 
    So that it can provide the same features to the new String objects as well as to the old ones.

String Comparision
    
    By Using equals() Method
    By Using == Operator
    By compareTo() Method



StringBuffer:-

Java StringBuffer class is used to create mutable (modifiable) String objects. 
The StringBuffer class in Java is the same as String class except it is mutable i.e. it can be changed.
    Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. 
    So it is safe and will result in an order.

StringBuffer is synchronized i.e. thread safe. 
It means two threads can't call the methods of StringBuffer simultaneously.

StringBuilder :-
 
    The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized.

    StringBuilder is non-synchronized i.e. not thread safe. 
    It means two threads can call the methods of StringBuilder simultaneously.